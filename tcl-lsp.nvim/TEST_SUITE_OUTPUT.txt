Running Lua unit tests with plenary...
Real Neovim test environment initialized
Starting...Scheduling: tests/lua/config_spec.lua
Scheduling: tests/lua/init_spec.lua
Scheduling: tests/lua/features/completion_spec.lua
Scheduling: tests/lua/features/formatting_spec.lua
Scheduling: tests/lua/features/folding_spec.lua
Scheduling: tests/lua/features/codelens_spec.lua
Scheduling: tests/lua/features/symbols_spec.lua
Scheduling: tests/lua/features/hover_spec.lua
Scheduling: tests/lua/features/highlights_spec.lua
Scheduling: tests/lua/features/diagnostics_spec.lua
Scheduling: tests/lua/features/signature_spec.lua
Scheduling: tests/lua/server_spec.lua
Scheduling: tests/lua/utils/cache_spec.lua
Scheduling: tests/lua/utils/logger_spec.lua
Scheduling: tests/lua/utils/helpers_spec.lua
Scheduling: tests/lua/parser/init_spec.lua
Scheduling: tests/lua/parser/ast_spec.lua
Scheduling: tests/lua/parser/symbols_spec.lua
Scheduling: tests/lua/parser/command_substitution_spec.lua
Scheduling: tests/lua/parser/scope_spec.lua
Scheduling: tests/lua/actions/rename_spec.lua
Scheduling: tests/lua/actions/refactor_spec.lua
Scheduling: tests/lua/actions/init_spec.lua
Scheduling: tests/lua/actions/cleanup_spec.lua
Scheduling: tests/lua/analyzer/init_spec.lua
Scheduling: tests/lua/analyzer/definitions_spec.lua
Scheduling: tests/lua/analyzer/workspace_spec.lua
Scheduling: tests/lua/analyzer/references_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/folding_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/completion_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/formatting_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/symbols_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/highlights_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/config_spec.lua
Success ||      TCL LSP Configuration Default Configuration should provide sensible defaults
Success ||      TCL LSP Configuration Default Configuration should have reasonable default values
Success ||      TCL LSP Configuration Default Configuration should include all necessary root markers
Success ||      TCL LSP Configuration Default Configuration should support both TCL and RVT filetypes
Success ||      TCL LSP Configuration Configuration Setup should accept empty setup call
Success ||      TCL LSP Configuration Configuration Setup should accept nil configuration
Success ||      TCL LSP Configuration Configuration Setup should merge user configuration with defaults
Success ||      TCL LSP Configuration Configuration Setup should perform deep merge for nested tables
Success ||      TCL LSP Configuration Configuration Setup should allow multiple setup calls
Success ||      TCL LSP Configuration Configuration Validation should validate cmd field type
Success ||      TCL LSP Configuration Configuration Validation should accept valid cmd configurations
Success ||      TCL LSP Configuration Configuration Validation should validate root_markers field type
Success ||      TCL LSP Configuration Configuration Validation should validate log_level values
Success ||      TCL LSP Configuration Configuration Validation should validate numeric fields
Success ||      TCL LSP Configuration Configuration Validation should validate filetypes field
Success ||      TCL LSP Configuration Buffer-Local Configuration should support buffer-local overrides
Success ||      TCL LSP Configuration Buffer-Local Configuration should fall back to global config without buffer overrides
Success ||      TCL LSP Configuration Buffer-Local Configuration should handle current buffer when no buffer specified
Success ||      TCL LSP Configuration Buffer-Local Configuration should validate buffer-local configuration
Success ||      TCL LSP Configuration Configuration Utilities should provide configuration reset function
Success ||      TCL LSP Configuration Configuration Utilities should provide configuration update function
Success ||      TCL LSP Configuration Configuration Utilities should detect configuration changes
Success ||      TCL LSP Configuration Configuration Utilities should provide configuration validation function
Success ||      TCL LSP Configuration Configuration Export/Import should export current configuration
Success ||      TCL LSP Configuration Configuration Export/Import should import configuration
Success ||      TCL LSP Configuration Configuration Export/Import should handle configuration serialization
Success ||      TCL LSP Configuration Edge Cases should handle deeply nested configuration
Success ||      TCL LSP Configuration Edge Cases should handle circular references gracefully
Success ||      TCL LSP Configuration Edge Cases should handle very large configurations
Success ||      TCL LSP Configuration Edge Cases should handle special characters in configuration

Success:        30
Failed :        0
Errors :        0
========================================
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/codelens_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/hover_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/parser/scope_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/diagnostics_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/parser/symbols_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/actions/init_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/utils/logger_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/analyzer/references_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/analyzer/init_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/analyzer/definitions_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/actions/rename_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/utils/helpers_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/actions/refactor_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/actions/cleanup_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/signature_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/parser/init_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/utils/cache_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/analyzer/workspace_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/parser/command_substitution_spec.lua
Success ||      Command Substitution - Granular Tests Level 1: Simple Commands (No Substitution) should parse simple set with string value
Success ||      Command Substitution - Granular Tests Level 1: Simple Commands (No Substitution) should parse simple set with numeric value
Success ||      Command Substitution - Granular Tests Level 1: Simple Commands (No Substitution) should parse set with variable reference
Success ||      Command Substitution - Granular Tests Level 2: Commands with Square Brackets (As Strings) should handle brackets in quoted strings
Success ||      Command Substitution - Granular Tests Level 2: Commands with Square Brackets (As Strings) should handle escaped brackets
Success ||      Command Substitution - Granular Tests Level 3: Actual Command Substitution should parse set with command substitution - simple
Success ||      Command Substitution - Granular Tests Level 3: Actual Command Substitution should parse set with expr command substitution
Success ||      Command Substitution - Granular Tests Level 3: Actual Command Substitution should parse set with nested braces in substitution
Success ||      Command Substitution - Granular Tests Level 4: Multiple Substitutions should parse command with multiple substitutions
Success ||      Command Substitution - Granular Tests Level 5: Command Extraction with Brackets should not split commands on brackets

Success:        10
Failed :        0
Errors :        0
========================================
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua
Success ||      TCL AST Parser Basic AST Construction should parse empty TCL code
Success ||      TCL AST Parser Basic AST Construction should parse whitespace-only code
Success ||      TCL AST Parser Basic AST Construction should parse single comment
Success ||      TCL AST Parser Procedure (proc) Parsing should parse simple procedure with no arguments
Success ||      TCL AST Parser Procedure (proc) Parsing should parse procedure with arguments
Success ||      TCL AST Parser Procedure (proc) Parsing should parse procedure with default argument values
Fail    ||      TCL AST Parser Procedure (proc) Parsing should parse procedure with args (variable arguments)
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:142: Expected objects to be the same.
            Passed in:
            (table: 0x010280b818) {
              [1] = 1 }
            Expected:
            (boolean) true

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:142: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:129>

Success ||      TCL AST Parser Procedure (proc) Parsing should parse nested procedures
Success ||      TCL AST Parser Variable Declarations should parse simple variable set
Success ||      TCL AST Parser Variable Declarations should parse variable set with expression
Success ||      TCL AST Parser Variable Declarations should parse global variable declaration
Success ||      TCL AST Parser Variable Declarations should parse upvar declaration
Success ||      TCL AST Parser Variable Declarations should parse array set
Success ||      TCL AST Parser Control Flow Structures should parse if statement
Success ||      TCL AST Parser Control Flow Structures should parse if-else statement
Fail    ||      TCL AST Parser Control Flow Structures should parse if-elseif-else chain
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:271: Expected objects to be the same.
            Passed in:
            (nil)
            Expected:
            type table

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:271: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:257>

Success ||      TCL AST Parser Control Flow Structures should parse while loop
Success ||      TCL AST Parser Control Flow Structures should parse for loop
Success ||      TCL AST Parser Control Flow Structures should parse foreach loop
Fail    ||      TCL AST Parser Control Flow Structures should parse switch statement
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:336: Expected objects to be the same.
            Passed in:
            (nil)
            Expected:
            type table

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:336: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:323>

Fail    ||      TCL AST Parser Namespace Handling should parse namespace declaration
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:355: Expected objects to be the same.
            Passed in:
            (string) '{
                variable x 10
                proc myproc {} {}
            }'
            Expected:
            type table

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:355: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:342>

Success ||      TCL AST Parser Namespace Handling should parse namespace import
Success ||      TCL AST Parser Namespace Handling should parse namespace qualified names
Success ||      TCL AST Parser Position Tracking should track line and column numbers
Success ||      TCL AST Parser Position Tracking should track positions for all nodes
Success ||      TCL AST Parser Error Handling should detect syntax errors
Success ||      TCL AST Parser Error Handling should handle incomplete code
Success ||      TCL AST Parser Error Handling should provide helpful error messages
Success ||      TCL AST Parser Expression Parsing should parse expr command
Fail    ||      TCL AST Parser Expression Parsing should parse variable substitution
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:464: Expected objects to not be the same.
            Passed in:
            (nil)
            Did not expect:
            type nil

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:464: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:458>

Success ||      TCL AST Parser Expression Parsing should parse command substitution
Success ||      TCL AST Parser List Operations should parse list creation
Success ||      TCL AST Parser List Operations should parse lappend
Success ||      TCL AST Parser Package Handling should parse package require
Success ||      TCL AST Parser Package Handling should parse package provide
Success ||      TCL AST Parser File Path Handling should parse from file
Success ||      TCL AST Parser File Path Handling should handle file read errors
Fail    ||      TCL AST Parser Complex Real-World Code should parse complex procedure with multiple constructs
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:575: Should parse complex procedure: Parser error: Parser error: list element in quotes followed by "]" instead of space

            Expected objects to be the same.
            Passed in:
            (string) 'Parser error: Parser error: list element in quotes followed by "]" instead of space
            '
            Expected:
            type nil

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:575: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:550>

Success ||      TCL AST Parser Complex Real-World Code should parse multiple procedures and variables

Success:        33
Failed :        6
Errors :        0
========================================
Tests Failed. Exit: 1
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua
Success ||      TCL LSP Server State Management should initialize with clean state
Success ||      TCL LSP Server State Management should track server state during lifecycle
Success ||      TCL LSP Server State Management should handle multiple start attempts gracefully
Success ||      TCL LSP Server Root Directory Detection should find git root directory
Success ||      TCL LSP Server Root Directory Detection should find tcl.toml project marker
Success ||      TCL LSP Server Root Directory Detection should find project.tcl marker
Success ||      TCL LSP Server Root Directory Detection should fallback to current directory when no markers found
Success ||      TCL LSP Server Server Command Generation should generate valid command with default settings
Success ||      TCL LSP Server Server Command Generation should respect custom command configuration
Pending ||      TCL LSP Server LSP Capabilities should provide modern LSP capabilities LSP capabilities not yet exposed by server
Success ||      TCL LSP Server LSP Capabilities should provide modern LSP capabilities
Success ||      TCL LSP Server Lifecycle Management should start server successfully
Success ||      TCL LSP Server Lifecycle Management should stop server gracefully
Success ||      TCL LSP Server Lifecycle Management should restart server properly
Success ||      TCL LSP Server Error Handling should handle missing TCL executable gracefully
Success ||      TCL LSP Server Error Handling should handle invalid TCL files without crashing
Success ||      TCL LSP Server Error Handling should validate function parameters
Fail    ||      TCL LSP Server Integration with Real Neovim should attach to buffer correctly
            ...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:404: TCL LSP client should attach to buffer
            Expected objects to be the same.
            Passed in:
            (boolean) false
            Expected:
            (boolean) true

            stack traceback:
                ...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:404: in function <...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:383>

Fail    ||      TCL LSP Server Integration with Real Neovim should handle multiple buffers in same project
            ...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:433: Main buffer should have LSP client
            Expected objects to be the same.
            Passed in:
            (boolean) false
            Expected:
            (boolean) true

            stack traceback:
                ...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:433: in function <...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:410>


Success:        16
Failed :        2
Errors :        0
========================================
Tests Failed. Exit: 1
Real Neovim test environment initialized
...vim/0.11.4/share/nvim/runtime/lua/vim/lsp/_transport.lua:68: Spawning language server with cmd: `{ "custom-tclsh", "/path/to/parser.tcl" }` failed. The language server is either not installed, missing from PATH, or not executable.

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/init_spec.lua
Success ||      TCL LSP Plugin Initialization Module Loading should load without errors
Success ||      TCL LSP Plugin Initialization Module Loading should expose expected public API
Success ||      TCL LSP Plugin Initialization Module Loading should have version information
Success ||      TCL LSP Plugin Initialization Module Loading should not pollute global namespace
Success ||      TCL LSP Plugin Initialization Setup Function should accept empty setup call
Success ||      TCL LSP Plugin Initialization Setup Function should accept nil configuration
Success ||      TCL LSP Plugin Initialization Setup Function should accept empty table configuration
Success ||      TCL LSP Plugin Initialization Setup Function should merge user configuration properly
Success ||      TCL LSP Plugin Initialization Setup Function should validate configuration parameters
Pending ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should activate on TCL files No LSP clients started - may need tclsh or manual start
Success ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should activate on TCL files
Pending ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should activate on RVT template files No LSP clients started for RVT - may need manual activation
Success ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should activate on RVT template files
Success ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should not activate on non-TCL files
Fail    ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should register appropriate autocommands
            ...ang/Documents/Repos/tcl-lsp.nvim/tests/lua/init_spec.lua:297: Invalid 'group': '*'

            stack traceback:
                ...ang/Documents/Repos/tcl-lsp.nvim/tests/lua/init_spec.lua:297: in function <...ang/Documents/Repos/tcl-lsp.nvim/tests/lua/init_spec.lua:295>

Fail    ||      TCL LSP Plugin Initialization LSP Server Integration should start LSP server when requested
            ...ang/Documents/Repos/tcl-lsp.nvim/tests/lua/init_spec.lua:332: Should have active LSP clients after start
            Expected objects to be the same.
            Passed in:
            (boolean) false
            Expected:
            (boolean) true

            stack traceback:
                ...ang/Documents/Repos/tcl-lsp.nvim/tests/lua/init_spec.lua:332: in function <...ang/Documents/Repos/tcl-lsp.nvim/tests/lua/init_spec.lua:317>

Success ||      TCL LSP Plugin Initialization LSP Server Integration should stop LSP server when requested
Success ||      TCL LSP Plugin Initialization LSP Server Integration should provide status information
Success ||      TCL LSP Plugin Initialization Error Handling and Edge Cases should handle server startup failures gracefully
Success ||      TCL LSP Plugin Initialization Error Handling and Edge Cases should handle missing dependencies
Success ||      TCL LSP Plugin Initialization Error Handling and Edge Cases should handle repeated setup calls
Success ||      TCL LSP Plugin Initialization Error Handling and Edge Cases should validate function parameters
Success ||      TCL LSP Plugin Initialization Plugin State Management should maintain consistent internal state
Success ||      TCL LSP Plugin Initialization Plugin State Management should clean up properly on plugin reload

Success:        20
Failed :        2
Errors :        0
========================================
Tests Failed. Exit: 1

Running Tcl unit tests...
=========================================
TCL AST Module Test Suite
=========================================

UNIT TESTS
=========================================

Running: JSON Serialization
------------------------------------------------------------
=========================================
JSON Module Test Suite
=========================================

Group 1: Basic Type Serialization
-----------------------------------------
✗ FAIL: Empty dict
  Expected: {}
  Got: {

}
✓ PASS: Simple string value
✓ PASS: Integer value
✗ FAIL: Float value
  Expected: {
  "pi": 3.14
}
  Got: {
  "pi": "3.14"
}
✗ FAIL: Boolean-like values
  Expected: {
  "flag": 1
}
  Got: {
  "flag": "1"
}

Group 2: Special Character Escaping
-----------------------------------------
✗ FAIL: Newline escape
  Expected: {
  "text": "line1\nline2"
}
  Got: {
  "text": {
    "line1": "line2"
  }
}
✗ FAIL: Quote escape
  Expected: {
  "text": "say \"hello\""
}
  Got: {
  "text": {
    "say": "hello"
  }
}
✓ PASS: Backslash escape
✗ FAIL: Tab escape
  Expected: {
  "text": "col1\tcol2"
}
  Got: {
  "text": {
    "col1": "col2"
  }
}
✗ FAIL: Carriage return escape
  Expected: {
  "text": "line1\rline2"
}
  Got: {
  "text": {
    "line1": "line2"
  }
}

Group 3: List Serialization
-----------------------------------------
✓ PASS: Empty list
✓ PASS: Simple list
✓ PASS: Numeric list
✓ PASS: Mixed list
✗ FAIL: Single element list
  Expected: {
  "single": ["alone"]
}
  Got: {
  "single": "alone"
}

Group 4: Nested Structures (BUG FIX VALIDATION)
-----------------------------------------
✓ PASS: List of dicts
✓ PASS: Nested dict
✓ PASS: Dict with list of dicts
✓ PASS: Complex AST-like structure
✗ FAIL: Empty children list (common AST pattern)
  Expected: 1
  Got: 0

Group 5: Real-World AST Structures
-----------------------------------------
✓ PASS: Simple proc AST node
✓ PASS: Set command AST node
✓ PASS: Root AST with multiple children

Group 6: Indentation Formatting
-----------------------------------------
✓ PASS: Nested indentation
✓ PASS: List indentation

Group 7: Edge Cases
-----------------------------------------
✓ PASS: Very long string
✓ PASS: Many keys
✓ PASS: Deep nesting (10 levels)

=========================================
Test Results
=========================================
Total:  28
Passed: 19
Failed: 9

✗ SOME TESTS FAILED
child process exited abnormally

Running: Utilities
------------------------------------------------------------
=========================================
Utils Module Test Suite
=========================================

Group 1: Range Creation
-----------------------------------------
✓ PASS: Simple range
✓ PASS: Single line range
✓ PASS: Column-only range
✓ PASS: Large line numbers
✓ PASS: Range structure completeness

Group 2: Line Mapping
-----------------------------------------
✓ PASS: Build line map - single line
✓ PASS: Build line map - multiple lines
✓ PASS: Build line map - empty string
✓ PASS: Build line map - very long line

Group 3: Offset to Line Conversion
-----------------------------------------
✓ PASS: Offset at start of line 1
✓ PASS: Offset in middle of line 1
✓ PASS: Offset at start of line 2
✓ PASS: Offset in middle of line 2
✓ PASS: Offset at start of line 3
✗ FAIL: Offset beyond end (should default)
  Expected: 1 1
  Got: 1 101

Group 4: Line Counting
-----------------------------------------
✓ PASS: Count lines - single line
✓ PASS: Count lines - two lines
✓ PASS: Count lines - three lines
✓ PASS: Count lines - empty string
✓ PASS: Count lines - only newline
✓ PASS: Count lines - multiple newlines

Group 5: Complex Scenarios
-----------------------------------------
✓ PASS: TCL code with proc
✓ PASS: Offset in multiline code
✓ PASS: Offset with tabs
✓ PASS: Long file simulation

Group 6: Edge Cases
-----------------------------------------
✓ PASS: Unicode characters in code
✓ PASS: Windows line endings (CRLF)
✓ PASS: Mixed line endings
✓ PASS: Range with same start and end

=========================================
Test Results
=========================================
Total:  29
Passed: 28
Failed: 1

✗ SOME TESTS FAILED
child process exited abnormally

Running: Comment Extraction
------------------------------------------------------------
Comment Extraction Tests
========================

✓ PASS: No comments
✓ PASS: Single comment
✓ PASS: Multiple comments
✓ PASS: Indented comment
✓ PASS: Comment with special chars
✓ PASS: Empty file
✓ PASS: Only whitespace
✓ PASS: Comment at end
✓ PASS: Comment in middle
✓ PASS: Multiple consecutive

Results: 10/10 passed

Running: Command Extraction
------------------------------------------------------------
Command Extraction Tests
========================

✓ PASS: Single command
✓ PASS: Two commands
✓ PASS: Three commands
✓ PASS: Multiline proc
✓ PASS: Commands with comments
✓ PASS: Empty lines
✓ PASS: Command with nested braces
✓ PASS: For loop
✓ PASS: Multiple procs
✓ PASS: Empty code

Results: 10/10 passed


PARSER TESTS
=========================================

Running: Procedure Parser
------------------------------------------------------------
Procedure Parser Tests
======================

✗ FAIL: Simple proc no args - Error: invalid command name "::ast::parsers::parse_proc"
✗ FAIL: Proc with args - Error: invalid command name "::ast::parsers::parse_proc"
✗ FAIL: Proc with defaults - Error: invalid command name "::ast::parsers::parse_proc"
✗ FAIL: Proc with varargs - Error: invalid command name "::ast::parsers::parse_proc"
✗ FAIL: Complex proc - Error: invalid command name "::ast::parsers::parse_proc"

Results: 0/5 passed
child process exited abnormally

Running: Variable Parser
------------------------------------------------------------
Variable Parser Tests
=====================

✗ FAIL: Simple set - Error: invalid command name "::ast::parsers::parse_variable"
✗ FAIL: Set with string - Error: invalid command name "::ast::parsers::parse_variable"
can't read "x": no such variable
    while executing
"test "Set with variable reference" "set y $x" "set""
    (file "/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/tcl/core/ast/parsers/test_variables.tcl" line 40)

Running: Control Flow Parser
------------------------------------------------------------
Control Flow Parser Tests
=========================

✗ FAIL: Simple if - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: If-else - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: If-elseif-else - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: Simple while - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: While with complex condition - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: Simple for - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: For with step - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: Simple foreach - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: Foreach with multiple vars - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: Foreach multiple lists - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: Simple switch - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: Switch with default - Error: invalid command name "::ast::parsers::parse_control_flow"
✗ FAIL: Switch with -exact - Error: invalid command name "::ast::parsers::parse_control_flow"

Results: 0/13 passed
child process exited abnormally

Running: Namespace Parser
------------------------------------------------------------
Namespace Parser Tests
======================

✗ FAIL: Simple namespace - Error: invalid command name "::ast::parsers::parse_namespace"
✗ FAIL: Namespace with body - Error: invalid command name "::ast::parsers::parse_namespace"
✗ FAIL: Nested namespace - Error: invalid command name "::ast::parsers::parse_namespace"
✗ FAIL: Simple import - Error: invalid command name "::ast::parsers::parse_namespace"
✗ FAIL: Import specific - Error: invalid command name "::ast::parsers::parse_namespace"
✗ FAIL: Simple export - Error: invalid command name "::ast::parsers::parse_namespace"
✗ FAIL: Export multiple - Error: invalid command name "::ast::parsers::parse_namespace"
✗ FAIL: Export with pattern - Error: invalid command name "::ast::parsers::parse_namespace"

Results: 0/8 passed
child process exited abnormally

Running: Package Parser
------------------------------------------------------------
Package Parser Tests
====================

✗ FAIL: Simple require - Error: invalid command name "::ast::parsers::parse_package"
✗ FAIL: Require with version - Error: invalid command name "::ast::parsers::parse_package"
✗ FAIL: Require with exact version - Error: invalid command name "::ast::parsers::parse_package"
✗ FAIL: Simple provide - Error: invalid command name "::ast::parsers::parse_package"
✗ FAIL: Provide with version - Error: invalid command name "::ast::parsers::parse_package"

Results: 0/5 passed
child process exited abnormally

Running: Expression Parser
------------------------------------------------------------
Expression Parser Tests
=======================

✗ FAIL: Simple arithmetic - Error: invalid command name "::ast::parsers::parse_expr"
✗ FAIL: Expression with variables - Error: invalid command name "::ast::parsers::parse_expr"
✗ FAIL: Complex expression - Error: invalid command name "::ast::parsers::parse_expr"
✗ FAIL: Comparison - Error: invalid command name "::ast::parsers::parse_expr"
✗ FAIL: Logical expression - Error: invalid command name "::ast::parsers::parse_expr"
✗ FAIL: Function call - Error: invalid command name "::ast::parsers::parse_expr"
✗ FAIL: String comparison - Error: invalid command name "::ast::parsers::parse_expr"

Results: 0/7 passed
child process exited abnormally

Running: List Parser
------------------------------------------------------------
List Parser Tests
=================

✗ FAIL: Simple list - Error: invalid command name "::ast::parsers::parse_list"
✗ FAIL: Empty list - Error: invalid command name "::ast::parsers::parse_list"
✗ FAIL: List with spaces - Error: invalid command name "::ast::parsers::parse_list"
✗ FAIL: Simple lappend - Error: invalid command name "::ast::parsers::parse_list"
✗ FAIL: Lappend multiple - Error: invalid command name "::ast::parsers::parse_list"
✗ FAIL: Simple puts - Error: invalid command name "::ast::parsers::parse_list"
✗ FAIL: Puts to channel - Error: invalid command name "::ast::parsers::parse_list"
✗ FAIL: Puts with -nonewline - Error: invalid command name "::ast::parsers::parse_list"

Results: 0/8 passed
child process exited abnormally


INTEGRATION TESTS
=========================================

Running: Full AST Integration
------------------------------------------------------------
=========================================
Full AST Integration Tests
=========================================

✗ FAIL: Empty code produces empty AST - has root type (Error: missing value to go with key)
✗ FAIL: Single set command - has root type (Error: missing value to go with key)
✗ FAIL: Simple procedure - has root type (Error: missing value to go with key)
✗ FAIL: Multiple commands - has root type (Error: missing value to go with key)
✗ FAIL: If statement - has root type (Error: missing value to go with key)
✗ FAIL: Namespace eval - has root type (Error: missing value to go with key)

=========================================
Test Results
=========================================
Total:  6
Passed: 0

✗ SOME TESTS FAILED
child process exited abnormally


=========================================
TEST SUITE SUMMARY
=========================================

Test Suite                               Status
============================================================
JSON Serialization                       ✗ FAIL
Utilities                                ✗ FAIL
Comment Extraction                       ✓ PASS
Command Extraction                       ✓ PASS
Procedure Parser                         ✗ FAIL
Variable Parser                          ✗ FAIL
Control Flow Parser                      ✗ FAIL
Namespace Parser                         ✗ FAIL
Package Parser                           ✗ FAIL
Expression Parser                        ✗ FAIL
List Parser                              ✗ FAIL
Full AST Integration                     ✗ FAIL
============================================================

Total Suites:  12
Passed:        2
Failed:        10

✗ SOME TEST SUITES FAILED

Please review failures above.
